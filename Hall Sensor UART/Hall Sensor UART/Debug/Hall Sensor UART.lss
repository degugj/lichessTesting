
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a11  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000499  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000235  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Transmit>:
			MuxData |= (1<<i);
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
  80:	ef e9       	ldi	r30, 0x9F	; 159
  82:	ff e0       	ldi	r31, 0x0F	; 15
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <USART_Transmit+0x4>
  88:	00 c0       	rjmp	.+0      	; 0x8a <USART_Transmit+0xa>
  8a:	00 00       	nop
  8c:	e0 ec       	ldi	r30, 0xC0	; 192
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	90 81       	ld	r25, Z
  92:	95 ff       	sbrs	r25, 5
  94:	fd cf       	rjmp	.-6      	; 0x90 <USART_Transmit+0x10>
  96:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  9a:	08 95       	ret

0000009c <USART_Receive>:
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	ec f7       	brge	.-6      	; 0xa0 <USART_Receive+0x4>
  a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <USART_init>:
  ae:	e4 e6       	ldi	r30, 0x64	; 100
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	80 83       	st	Z, r24
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ca:	08 95       	ret

000000cc <MuxInit>:
  cc:	52 9a       	sbi	0x0a, 2	; 10
  ce:	53 9a       	sbi	0x0a, 3	; 10
  d0:	54 9a       	sbi	0x0a, 4	; 10
  d2:	3d 98       	cbi	0x07, 5	; 7
  d4:	3c 98       	cbi	0x07, 4	; 7
  d6:	20 98       	cbi	0x04, 0	; 4
  d8:	21 98       	cbi	0x04, 1	; 4
  da:	38 98       	cbi	0x07, 0	; 7
  dc:	39 98       	cbi	0x07, 1	; 7
  de:	3a 98       	cbi	0x07, 2	; 7
  e0:	3b 98       	cbi	0x07, 3	; 7
  e2:	08 95       	ret

000000e4 <SendData>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
  e4:	cf 93       	push	r28
  e6:	c6 2f       	mov	r28, r22
	USART_Transmit(Byte1);
  e8:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
	USART_Transmit(Byte2);
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:

int main(void)
{
	
	MuxInit();
  f6:	0e 94 66 00 	call	0xcc	; 0xcc <MuxInit>
	
	//DDRB |= (1<<2); //SetLED as output
		
	uint8_t UART_lastRecievedByte;
	USART_init();
  fa:	0e 94 57 00 	call	0xae	; 0xae <USART_init>
    while (1) 
    {
		UART_lastRecievedByte = USART_Receive();
  fe:	0e 94 4e 00 	call	0x9c	; 0x9c <USART_Receive>
		
		if (UART_lastRecievedByte == 0b00101000) {
 102:	88 32       	cpi	r24, 0x28	; 40
 104:	01 f5       	brne	.+64     	; 0x146 <main+0x50>
			SendData(0x00,0x00);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x01,0x00);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x02,0x00);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x03,0b00000010);
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x04,0x00);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x05,0x00);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x06,0x00);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x07,0x00);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	87 e0       	ldi	r24, 0x07	; 7
 142:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
		}
		
		UART_lastRecievedByte = USART_Receive();
 146:	0e 94 4e 00 	call	0x9c	; 0x9c <USART_Receive>
		
		if (UART_lastRecievedByte == 0b00110000) {
 14a:	80 33       	cpi	r24, 0x30	; 48
 14c:	c1 f6       	brne	.-80     	; 0xfe <main+0x8>
			SendData(0x00,0x00);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x01,0x00);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x02,0x00);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x03,0b00000100);
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x04,0x00);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x05,0x00);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x06,0x00);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
			SendData(0x07,0x00);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	0e 94 72 00 	call	0xe4	; 0xe4 <SendData>
 18e:	b7 cf       	rjmp	.-146    	; 0xfe <main+0x8>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
