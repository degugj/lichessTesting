
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d79  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060d  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085c  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	a0 00       	.word	0x00a0	; ????
  6a:	88 00       	.word	0x0088	; ????
  6c:	96 00       	.word	0x0096	; ????
  6e:	92 00       	.word	0x0092	; ????
  70:	8d 00       	.word	0x008d	; ????
  72:	9b 00       	.word	0x009b	; ????
  74:	83 00       	.word	0x0083	; ????
  76:	a5 00       	.word	0x00a5	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  88:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	ef e9       	ldi	r30, 0x9F	; 159
  92:	ff e0       	ldi	r31, 0x0F	; 15
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <USART_Transmit+0x4>
  98:	00 c0       	rjmp	.+0      	; 0x9a <USART_Transmit+0xa>
  9a:	00 00       	nop
void USART_Transmit(uint8_t data)
{

	_delay_ms(1);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	95 ff       	sbrs	r25, 5
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <USART_Transmit+0x10>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	08 95       	ret

000000ac <USART_Receive>:
 * Description: Returns the received parameters from UART
 * Input Parameters : NONE
 * Return value: 8-bit data received from UART
 */
int USART_Receive(void){
	while ( !(UCSR0A & (1<<RXC0)) ){}
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	ec f7       	brge	.-6      	; 0xb0 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
  b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <USART_init>:

void USART_init(void){
	
	//DISABLE POWER REDUCTION FOR USART
	PRR &= ~( 1 << PRUSART0);
  be:	e4 e6       	ldi	r30, 0x64	; 100
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	80 83       	st	Z, r24
	/*Set baud rate */
	//9600 for 16MHz clock
	UBRR0L = 0b01100111;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*Enable receiver and transmitter //and Receive INterrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE0);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* 8-bit data */
	UCSR0C = (3<<UCSZ00);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  da:	08 95       	ret

000000dc <MuxInit>:
}

void MuxInit(void) 
{
	DDRD |= (1<<A);
  dc:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= (1<<B);
  de:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1<<C);
  e0:	54 9a       	sbi	0x0a, 4	; 10
	
	DDRD &= ~(1<<Mux0);
  e2:	56 98       	cbi	0x0a, 6	; 10
	DDRD &= ~(1<<Mux1);
  e4:	57 98       	cbi	0x0a, 7	; 10
	DDRB &= ~(1<<Mux2);
  e6:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~(1<<Mux3);
  e8:	21 98       	cbi	0x04, 1	; 4
	DDRC &= ~(1<<Mux4);
  ea:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<Mux5);
  ec:	39 98       	cbi	0x07, 1	; 7
	DDRC &= ~(1<<Mux6);
  ee:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1<<Mux7);
  f0:	3b 98       	cbi	0x07, 3	; 7
  f2:	08 95       	ret

000000f4 <SetABC>:
}

void SetABC(uint8_t row)
{
 	switch (row)
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	91 05       	cpc	r25, r1
  fa:	50 f5       	brcc	.+84     	; 0x150 <SetABC+0x5c>
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5c       	subi	r30, 0xCC	; 204
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 23 02 	jmp	0x446	; 0x446 <__tablejump2__>
 	{
 		case 6 :
 		PORTD |= (1<<C)|(1<<B);
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<A);
 10c:	5a 98       	cbi	0x0b, 2	; 11
 		break;
 10e:	08 95       	ret
 		case 1 :
 		PORTD |= (1<<B);
 110:	5b 9a       	sbi	0x0b, 3	; 11
 		PORTD &= ~(1<<A) &~(1<<C);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8b 7e       	andi	r24, 0xEB	; 235
 116:	8b b9       	out	0x0b, r24	; 11
 		break;
 118:	08 95       	ret
 		case 4 :
 		PORTD |= (1<<C);
 11a:	5c 9a       	sbi	0x0b, 4	; 11
 		PORTD &= ~(1<<A)&~(1<<B);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	83 7f       	andi	r24, 0xF3	; 243
 120:	8b b9       	out	0x0b, r24	; 11
 		break;
 122:	08 95       	ret
		case 3 :
		PORTD &= ~(1<<A)&~(1<<B)&~(1<<C);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	83 7e       	andi	r24, 0xE3	; 227
 128:	8b b9       	out	0x0b, r24	; 11
 		break;
 12a:	08 95       	ret
 		case 2 :
 		PORTD |= (1<<A);
 12c:	5a 9a       	sbi	0x0b, 2	; 11
 		PORTD &= ~(1<<B)&~(1<<C);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	87 7e       	andi	r24, 0xE7	; 231
 132:	8b b9       	out	0x0b, r24	; 11
 		break;
 134:	08 95       	ret
 		case 5 :
 		PORTD |= (1<<C)|(1<<A);
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	84 61       	ori	r24, 0x14	; 20
 13a:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<B);
 13c:	5b 98       	cbi	0x0b, 3	; 11
		break;
 13e:	08 95       	ret
		case 0:
 		PORTD |= (1<<A)|(1<<B);
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8c 60       	ori	r24, 0x0C	; 12
 144:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<C);
 146:	5c 98       	cbi	0x0b, 4	; 11
		break;
 148:	08 95       	ret
		case 7 :
		PORTD |= (1<<A)|(1<<B)|(1<<C);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8c 61       	ori	r24, 0x1C	; 28
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

00000152 <GatherMuxDataB>:
	}

}

uint8_t GatherMuxDataB(uint8_t Mux)
{
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	09 f4       	brne	.+2      	; 0x168 <GatherMuxDataB+0x16>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 e0       	ldi	r16, 0x01	; 1
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <GatherMuxDataB+0x20>
 16e:	00 0f       	add	r16, r16
 170:	11 1f       	adc	r17, r17
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <GatherMuxDataB+0x1c>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PINB |= (1<<6);
		if(bit_is_clear(PINB,Mux)) {
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux2;
	} else {
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
 17a:	d1 2c       	mov	r13, r1
		SetABC(i);
		PINB |= (1<<6);
		if(bit_is_clear(PINB,Mux)) {
			_delay_ms(10);
			if(bit_is_clear(PINB,Mux)) {
				MuxData |= (1<<i);
 17c:	ee 24       	eor	r14, r14
 17e:	e3 94       	inc	r14
 180:	f1 2c       	mov	r15, r1
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PINB |= (1<<6);
 188:	1e 9a       	sbi	0x03, 6	; 3
		if(bit_is_clear(PINB,Mux)) {
 18a:	83 b1       	in	r24, 0x03	; 3
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	80 23       	and	r24, r16
 190:	91 23       	and	r25, r17
 192:	89 2b       	or	r24, r25
 194:	a1 f4       	brne	.+40     	; 0x1be <GatherMuxDataB+0x6c>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <GatherMuxDataB+0x48>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <GatherMuxDataB+0x4e>
 1a0:	00 00       	nop
			_delay_ms(10);
			if(bit_is_clear(PINB,Mux)) {
 1a2:	83 b1       	in	r24, 0x03	; 3
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	80 23       	and	r24, r16
 1a8:	91 23       	and	r25, r17
 1aa:	89 2b       	or	r24, r25
 1ac:	41 f4       	brne	.+16     	; 0x1be <GatherMuxDataB+0x6c>
				MuxData |= (1<<i);
 1ae:	c7 01       	movw	r24, r14
 1b0:	0c 2e       	mov	r0, r28
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GatherMuxDataB+0x66>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GatherMuxDataB+0x62>
 1bc:	d8 2a       	or	r13, r24
 1be:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 1c0:	c8 30       	cpi	r28, 0x08	; 8
 1c2:	d1 05       	cpc	r29, r1
 1c4:	f1 f6       	brne	.-68     	; 0x182 <GatherMuxDataB+0x30>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 1c6:	8d 2d       	mov	r24, r13
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	08 95       	ret

000001d8 <GatherMuxDataC>:

uint8_t GatherMuxDataC(uint8_t Mux)
{
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	if(Mux == 4) {
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <GatherMuxDataC+0x1e>
		Mux = Mux4;
	} else if (Mux == 5) {
 1ea:	85 30       	cpi	r24, 0x05	; 5
 1ec:	31 f0       	breq	.+12     	; 0x1fa <GatherMuxDataC+0x22>
		Mux = Mux5;
	} else if (Mux == 6) {
 1ee:	86 30       	cpi	r24, 0x06	; 6
 1f0:	31 f0       	breq	.+12     	; 0x1fe <GatherMuxDataC+0x26>
		Mux = Mux6 ;
	} else {
		Mux = Mux7;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <GatherMuxDataC+0x28>
}

uint8_t GatherMuxDataC(uint8_t Mux)
{
	if(Mux == 4) {
		Mux = Mux4;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <GatherMuxDataC+0x28>
	} else if (Mux == 5) {
		Mux = Mux5;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <GatherMuxDataC+0x28>
	} else if (Mux == 6) {
		Mux = Mux6 ;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	01 e0       	ldi	r16, 0x01	; 1
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <GatherMuxDataC+0x32>
 206:	00 0f       	add	r16, r16
 208:	11 1f       	adc	r17, r17
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <GatherMuxDataC+0x2e>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PINC |= (1<<6);
		if(bit_is_clear(PINC,Mux)) {
 20e:	c0 e0       	ldi	r28, 0x00	; 0
 210:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux6 ;
	} else {
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
 212:	d1 2c       	mov	r13, r1
		SetABC(i);
		PINC |= (1<<6);
		if(bit_is_clear(PINC,Mux)) {
			_delay_ms(10);
			if(bit_is_clear(PINC,Mux)) {
				MuxData |= (1<<i);
 214:	ee 24       	eor	r14, r14
 216:	e3 94       	inc	r14
 218:	f1 2c       	mov	r15, r1
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PINC |= (1<<6);
 220:	36 9a       	sbi	0x06, 6	; 6
		if(bit_is_clear(PINC,Mux)) {
 222:	86 b1       	in	r24, 0x06	; 6
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	80 23       	and	r24, r16
 228:	91 23       	and	r25, r17
 22a:	89 2b       	or	r24, r25
 22c:	a1 f4       	brne	.+40     	; 0x256 <GatherMuxDataC+0x7e>
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <GatherMuxDataC+0x5a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <GatherMuxDataC+0x60>
 238:	00 00       	nop
			_delay_ms(10);
			if(bit_is_clear(PINC,Mux)) {
 23a:	86 b1       	in	r24, 0x06	; 6
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	80 23       	and	r24, r16
 240:	91 23       	and	r25, r17
 242:	89 2b       	or	r24, r25
 244:	41 f4       	brne	.+16     	; 0x256 <GatherMuxDataC+0x7e>
				MuxData |= (1<<i);
 246:	c7 01       	movw	r24, r14
 248:	0c 2e       	mov	r0, r28
 24a:	02 c0       	rjmp	.+4      	; 0x250 <GatherMuxDataC+0x78>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <GatherMuxDataC+0x74>
 254:	d8 2a       	or	r13, r24
 256:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 258:	c8 30       	cpi	r28, 0x08	; 8
 25a:	d1 05       	cpc	r29, r1
 25c:	f1 f6       	brne	.-68     	; 0x21a <GatherMuxDataC+0x42>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 25e:	8d 2d       	mov	r24, r13
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	08 95       	ret

00000270 <GatherMuxDataD>:

uint8_t GatherMuxDataD(uint8_t Mux)
{
 270:	df 92       	push	r13
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
	if(Mux == 0) {
 27e:	88 23       	and	r24, r24
 280:	11 f0       	breq	.+4      	; 0x286 <GatherMuxDataD+0x16>
		Mux = Mux0;
	} else {
		Mux = Mux1;
 282:	87 e0       	ldi	r24, 0x07	; 7
 284:	01 c0       	rjmp	.+2      	; 0x288 <GatherMuxDataD+0x18>
}

uint8_t GatherMuxDataD(uint8_t Mux)
{
	if(Mux == 0) {
		Mux = Mux0;
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	01 e0       	ldi	r16, 0x01	; 1
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <GatherMuxDataD+0x22>
 28e:	00 0f       	add	r16, r16
 290:	11 1f       	adc	r17, r17
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <GatherMuxDataD+0x1e>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PIND |= (1<<6);
		if(bit_is_clear(PIND,Mux)) {
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux0;
	} else {
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
 29a:	d1 2c       	mov	r13, r1
		SetABC(i);
		PIND |= (1<<6);
		if(bit_is_clear(PIND,Mux)) {
			_delay_ms(10);
			if(bit_is_clear(PIND,Mux)) {
				MuxData |= (1<<i);
 29c:	ee 24       	eor	r14, r14
 29e:	e3 94       	inc	r14
 2a0:	f1 2c       	mov	r15, r1
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PIND |= (1<<6);
 2a8:	4e 9a       	sbi	0x09, 6	; 9
		if(bit_is_clear(PIND,Mux)) {
 2aa:	89 b1       	in	r24, 0x09	; 9
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	80 23       	and	r24, r16
 2b0:	91 23       	and	r25, r17
 2b2:	89 2b       	or	r24, r25
 2b4:	a1 f4       	brne	.+40     	; 0x2de <GatherMuxDataD+0x6e>
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9c e9       	ldi	r25, 0x9C	; 156
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <GatherMuxDataD+0x4a>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <GatherMuxDataD+0x50>
 2c0:	00 00       	nop
			_delay_ms(10);
			if(bit_is_clear(PIND,Mux)) {
 2c2:	89 b1       	in	r24, 0x09	; 9
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	80 23       	and	r24, r16
 2c8:	91 23       	and	r25, r17
 2ca:	89 2b       	or	r24, r25
 2cc:	41 f4       	brne	.+16     	; 0x2de <GatherMuxDataD+0x6e>
				MuxData |= (1<<i);
 2ce:	c7 01       	movw	r24, r14
 2d0:	0c 2e       	mov	r0, r28
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <GatherMuxDataD+0x68>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <GatherMuxDataD+0x64>
 2dc:	d8 2a       	or	r13, r24
 2de:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 2e0:	c8 30       	cpi	r28, 0x08	; 8
 2e2:	d1 05       	cpc	r29, r1
 2e4:	f1 f6       	brne	.-68     	; 0x2a2 <GatherMuxDataD+0x32>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 2e6:	8d 2d       	mov	r24, r13
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	08 95       	ret

000002f8 <SendData>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
 2f8:	cf 93       	push	r28
 2fa:	c6 2f       	mov	r28, r22
	USART_Transmit(Byte1);
 2fc:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
	USART_Transmit(Byte2);
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
}
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <main>:

int main(void)
{
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
	
	MuxInit();
 31a:	0e 94 6e 00 	call	0xdc	; 0xdc <MuxInit>
	
	//DDRB |= (1<<2); //SetLED as output
		
	uint8_t UART_lastRecievedByte;
	USART_init();
 31e:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_init>
	uint8_t LD5;
	uint8_t LD6;
	uint8_t LD7;
	
	// get initial data
	MD0 = GatherMuxDataD(0);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 38 01 	call	0x270	; 0x270 <GatherMuxDataD>
 328:	d8 2e       	mov	r13, r24
	MD1 = GatherMuxDataD(1);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 38 01 	call	0x270	; 0x270 <GatherMuxDataD>
	MD1 &= ~(1<<3);
 330:	d8 2f       	mov	r29, r24
 332:	d7 7f       	andi	r29, 0xF7	; 247
	MD2 = GatherMuxDataB(2);
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 33a:	e8 2e       	mov	r14, r24
	MD3 = GatherMuxDataB(3);
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 342:	f8 2e       	mov	r15, r24
	MD4 = GatherMuxDataC(4);
 344:	84 e0       	ldi	r24, 0x04	; 4
 346:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 34a:	08 2f       	mov	r16, r24
	MD5 = GatherMuxDataC(5);
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 352:	18 2f       	mov	r17, r24
	MD6 = 0x00;
	MD7 = GatherMuxDataC(7);
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 35a:	c8 2f       	mov	r28, r24
	LD4 = MD4;
	LD5 = MD5;
	LD6 = MD6;
	LD7 = MD7;
	
	UART_lastRecievedByte = USART_Receive();
 35c:	0e 94 56 00 	call	0xac	; 0xac <USART_Receive>
			
	if (UART_lastRecievedByte == 0b00101000) {
 360:	88 32       	cpi	r24, 0x28	; 40
 362:	01 f5       	brne	.+64     	; 0x3a4 <main+0x9a>
		SendData(0x00,MD0);
 364:	6d 2d       	mov	r22, r13
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x01,MD1);
 36c:	6d 2f       	mov	r22, r29
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x02,MD2);
 374:	6e 2d       	mov	r22, r14
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x03,MD3);
 37c:	6f 2d       	mov	r22, r15
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x04,MD4);
 384:	60 2f       	mov	r22, r16
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x05,MD5);
 38c:	61 2f       	mov	r22, r17
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x06,MD6);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
		SendData(0x07,MD7);
 39c:	6c 2f       	mov	r22, r28
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
	}
	
	UART_lastRecievedByte = USART_Receive();
 3a4:	0e 94 56 00 	call	0xac	; 0xac <USART_Receive>
	//
	if (UART_lastRecievedByte == 0b00110000) {
 3a8:	80 33       	cpi	r24, 0x30	; 48
 3aa:	09 f0       	breq	.+2      	; 0x3ae <main+0xa4>
 3ac:	41 c0       	rjmp	.+130    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

    while (1) 
    {
		//_delay_ms(100);
		
		MD0 = GatherMuxDataD(0);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 38 01 	call	0x270	; 0x270 <GatherMuxDataD>
 3b4:	c8 2e       	mov	r12, r24
		MD1 = GatherMuxDataD(1);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 38 01 	call	0x270	; 0x270 <GatherMuxDataD>
		MD1 &= ~(1<<3);
 3bc:	c8 2f       	mov	r28, r24
 3be:	c7 7f       	andi	r28, 0xF7	; 247
		MD2 = GatherMuxDataB(2);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 3c6:	d8 2e       	mov	r13, r24
		MD3 = GatherMuxDataB(3);
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 3ce:	e8 2e       	mov	r14, r24
		MD4 = GatherMuxDataC(4);
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 3d6:	f8 2e       	mov	r15, r24
		MD5 = GatherMuxDataC(5);
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 3de:	08 2f       	mov	r16, r24
		MD6 = 0x00;
		MD7 = GatherMuxDataC(7);
 3e0:	87 e0       	ldi	r24, 0x07	; 7
 3e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GatherMuxDataC>
 3e6:	18 2f       	mov	r17, r24
		
		//_delay_ms(100);
// 		
		if (LD1 != MD1) {
 3e8:	dc 17       	cp	r29, r28
 3ea:	09 f3       	breq	.-62     	; 0x3ae <main+0xa4>
			SendData(0x00,MD0);
 3ec:	6c 2d       	mov	r22, r12
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x01,MD1);
 3f4:	6c 2f       	mov	r22, r28
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x02,MD2);
 3fc:	6d 2d       	mov	r22, r13
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x03,MD3);
 404:	6e 2d       	mov	r22, r14
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x04,MD4);
 40c:	6f 2d       	mov	r22, r15
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x05,MD5);
 414:	60 2f       	mov	r22, r16
 416:	85 e0       	ldi	r24, 0x05	; 5
 418:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x06,MD6);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
			SendData(0x07,MD7);
 424:	61 2f       	mov	r22, r17
 426:	87 e0       	ldi	r24, 0x07	; 7
 428:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SendData>
    {
		//_delay_ms(100);
		
		MD0 = GatherMuxDataD(0);
		MD1 = GatherMuxDataD(1);
		MD1 &= ~(1<<3);
 42c:	dc 2f       	mov	r29, r28
 42e:	bf cf       	rjmp	.-130    	; 0x3ae <main+0xa4>
		
		//Sending UART message 0xF0
		//USART_Transmit(MD0);
    }
}
	}
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	08 95       	ret

00000446 <__tablejump2__>:
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	05 90       	lpm	r0, Z+
 44c:	f4 91       	lpm	r31, Z
 44e:	e0 2d       	mov	r30, r0
 450:	09 94       	ijmp

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
