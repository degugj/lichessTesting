
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076e  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e4  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Transmit>:
int USART_Receive(void){
	while ( !(UCSR0A & (1<<RXC0)) ){}
	/* Get and return received data from buffer */
	return UDR0;
	
}
  80:	ef e9       	ldi	r30, 0x9F	; 159
  82:	ff e0       	ldi	r31, 0x0F	; 15
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <USART_Transmit+0x4>
  88:	00 c0       	rjmp	.+0      	; 0x8a <USART_Transmit+0xa>
  8a:	00 00       	nop
  8c:	e0 ec       	ldi	r30, 0xC0	; 192
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	90 81       	ld	r25, Z
  92:	95 ff       	sbrs	r25, 5
  94:	fd cf       	rjmp	.-6      	; 0x90 <USART_Transmit+0x10>
  96:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  9a:	08 95       	ret

0000009c <USART_init>:

void USART_init(void){
	
	//DISABLE POWER REDUCTION FOR USART
	PRR &= ~( 1 << PRUSART0);
  9c:	e4 e6       	ldi	r30, 0x64	; 100
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8d 7f       	andi	r24, 0xFD	; 253
  a4:	80 83       	st	Z, r24
	/*Set baud rate */
	//9600 for 16MHz clock
	UBRR0L = 0b01100111;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*Enable receiver and transmitter //and Receive INterrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE0);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* 8-bit data */
	UCSR0C = (3<<UCSZ00);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
    //uint8_t UART_lastRecievedByte;
	USART_init();
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <USART_init>
    while (1) 
    {
		//UART_lastRecievedByte = USART_Receive();
		
		//Sending UART message 0xF0
		USART_Transmit(0xFF);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit>
  c4:	fc cf       	rjmp	.-8      	; 0xbe <main+0x4>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
