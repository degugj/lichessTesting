
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000881  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000772  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003eb  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000147  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
	USART_Transmit(Byte1);
	USART_Transmit(Byte2);
}
  80:	e4 e6       	ldi	r30, 0x64	; 100
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	80 83       	st	Z, r24
  8a:	87 e6       	ldi	r24, 0x67	; 103
  8c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9c:	08 95       	ret

0000009e <MuxInit>:
  9e:	52 9a       	sbi	0x0a, 2	; 10
  a0:	53 9a       	sbi	0x0a, 3	; 10
  a2:	54 9a       	sbi	0x0a, 4	; 10
  a4:	56 98       	cbi	0x0a, 6	; 10
  a6:	57 98       	cbi	0x0a, 7	; 10
  a8:	20 98       	cbi	0x04, 0	; 4
  aa:	21 98       	cbi	0x04, 1	; 4
  ac:	38 98       	cbi	0x07, 0	; 7
  ae:	39 98       	cbi	0x07, 1	; 7
  b0:	3a 98       	cbi	0x07, 2	; 7
  b2:	3b 98       	cbi	0x07, 3	; 7
  b4:	08 95       	ret

000000b6 <SetABC>:
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	93 7e       	andi	r25, 0xE3	; 227
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	82 ff       	sbrs	r24, 2
  be:	02 c0       	rjmp	.+4      	; 0xc4 <SetABC+0xe>
  c0:	5c 9a       	sbi	0x0b, 4	; 11
  c2:	08 95       	ret
  c4:	81 ff       	sbrs	r24, 1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <SetABC+0x16>
  c8:	5b 9a       	sbi	0x0b, 3	; 11
  ca:	08 95       	ret
  cc:	80 fd       	sbrc	r24, 0
  ce:	5a 9a       	sbi	0x0b, 2	; 11
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{
	
	MuxInit();
  d2:	0e 94 4f 00 	call	0x9e	; 0x9e <MuxInit>
	
	DDRB |= (1<<2); //SetLED as output
  d6:	22 9a       	sbi	0x04, 2	; 4
		
	//uint8_t UART_lastRecievedByte;
	USART_init();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
		
		//PIND |= (1<<Mux0);
		
		//uint8_t MD0 = 0x00; //GatherMuxData(0);
		
		PIND |= (1<<6);
  dc:	4e 9a       	sbi	0x09, 6	; 9
		
		SetABC(2);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <SetABC>
		
		//PORTD &= ~(1<<C);
		//PORTD &= ~(1<<B);
		//PORTD &= ~(1<<A);
				
		if(bit_is_clear(PIND,Mux0)) {
  e4:	4e 99       	sbic	0x09, 6	; 9
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x1a>
		//if ((PIND & (1<<Mux0))) {
			PORTB |= (1<<2);
  e8:	2a 9a       	sbi	0x05, 2	; 5
  ea:	f8 cf       	rjmp	.-16     	; 0xdc <main+0xa>
			//MD0 = 0xFF;
		} else {
			PORTB &= ~(1<<2);
  ec:	2a 98       	cbi	0x05, 2	; 5
  ee:	f6 cf       	rjmp	.-20     	; 0xdc <main+0xa>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
