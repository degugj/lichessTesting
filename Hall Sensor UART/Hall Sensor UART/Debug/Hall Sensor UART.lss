
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ad  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00000b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000441  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	7a 00       	.word	0x007a	; ????
  6a:	7f 00       	.word	0x007f	; ????
  6c:	84 00       	.word	0x0084	; ????
  6e:	89 00       	.word	0x0089	; ????
  70:	8d 00       	.word	0x008d	; ????
  72:	92 00       	.word	0x0092	; ????
  74:	97 00       	.word	0x0097	; ????
  76:	9c 00       	.word	0x009c	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
	USART_Transmit(Byte1);
	USART_Transmit(Byte2);
}
  90:	ef e9       	ldi	r30, 0x9F	; 159
  92:	ff e0       	ldi	r31, 0x0F	; 15
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <USART_Transmit+0x4>
  98:	00 c0       	rjmp	.+0      	; 0x9a <USART_Transmit+0xa>
  9a:	00 00       	nop
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	95 ff       	sbrs	r25, 5
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <USART_Transmit+0x10>
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	08 95       	ret

000000ac <USART_init>:
  ac:	e4 e6       	ldi	r30, 0x64	; 100
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	80 83       	st	Z, r24
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c8:	08 95       	ret

000000ca <MuxInit>:
  ca:	52 9a       	sbi	0x0a, 2	; 10
  cc:	53 9a       	sbi	0x0a, 3	; 10
  ce:	54 9a       	sbi	0x0a, 4	; 10
  d0:	56 98       	cbi	0x0a, 6	; 10
  d2:	57 98       	cbi	0x0a, 7	; 10
  d4:	20 98       	cbi	0x04, 0	; 4
  d6:	21 98       	cbi	0x04, 1	; 4
  d8:	38 98       	cbi	0x07, 0	; 7
  da:	39 98       	cbi	0x07, 1	; 7
  dc:	3a 98       	cbi	0x07, 2	; 7
  de:	3b 98       	cbi	0x07, 3	; 7
  e0:	08 95       	ret

000000e2 <SetABC>:
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	91 05       	cpc	r25, r1
  e8:	50 f5       	brcc	.+84     	; 0x13e <SetABC+0x5c>
  ea:	fc 01       	movw	r30, r24
  ec:	ec 5c       	subi	r30, 0xCC	; 204
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__tablejump2__>
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	88 61       	ori	r24, 0x18	; 24
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	42 98       	cbi	0x08, 2	; 8
  fc:	08 95       	ret
  fe:	43 9a       	sbi	0x08, 3	; 8
 100:	88 b1       	in	r24, 0x08	; 8
 102:	8b 7e       	andi	r24, 0xEB	; 235
 104:	88 b9       	out	0x08, r24	; 8
 106:	08 95       	ret
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	42 98       	cbi	0x08, 2	; 8
 110:	08 95       	ret
 112:	88 b1       	in	r24, 0x08	; 8
 114:	83 7e       	andi	r24, 0xE3	; 227
 116:	88 b9       	out	0x08, r24	; 8
 118:	08 95       	ret
 11a:	42 9a       	sbi	0x08, 2	; 8
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	87 7e       	andi	r24, 0xE7	; 231
 120:	88 b9       	out	0x08, r24	; 8
 122:	08 95       	ret
 124:	88 b1       	in	r24, 0x08	; 8
 126:	84 61       	ori	r24, 0x14	; 20
 128:	88 b9       	out	0x08, r24	; 8
 12a:	43 98       	cbi	0x08, 3	; 8
 12c:	08 95       	ret
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8c 60       	ori	r24, 0x0C	; 12
 132:	88 b9       	out	0x08, r24	; 8
 134:	44 98       	cbi	0x08, 4	; 8
 136:	08 95       	ret
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	8c 61       	ori	r24, 0x1C	; 28
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
	
	MuxInit();
 140:	0e 94 65 00 	call	0xca	; 0xca <MuxInit>
		
	//uint8_t UART_lastRecievedByte;
	USART_init();
 144:	0e 94 56 00 	call	0xac	; 0xac <USART_init>
// 		if ((PIND & (1<<Mux0))) {
// 			MD0 |= (1<<7);
// 		}
		
		//Sending UART message 0xF0
		USART_Transmit(MD0);
 148:	c1 e0       	ldi	r28, 0x01	; 1
		
		//PIND |= (1<<Mux0);
		
		uint8_t MD0 = 0x00; //GatherMuxData(0);
		
		PIND |= (1<<6);
 14a:	4e 9a       	sbi	0x09, 6	; 9
		
		SetABC(0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 71 00 	call	0xe2	; 0xe2 <SetABC>
		
		//PORTD &= ~(1<<C);
		//PORTD &= ~(1<<B);
		//PORTD &= ~(1<<A);
				
		if(bit_is_clear(PIND,Mux0)) {
 152:	89 b1       	in	r24, 0x09	; 9
// 		if ((PIND & (1<<Mux0))) {
// 			MD0 |= (1<<7);
// 		}
		
		//Sending UART message 0xF0
		USART_Transmit(MD0);
 154:	86 fb       	bst	r24, 6
 156:	88 27       	eor	r24, r24
 158:	80 f9       	bld	r24, 0
 15a:	8c 27       	eor	r24, r28
 15c:	81 95       	neg	r24
 15e:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
 162:	f3 cf       	rjmp	.-26     	; 0x14a <main+0xa>

00000164 <__tablejump2__>:
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	05 90       	lpm	r0, Z+
 16a:	f4 91       	lpm	r31, Z
 16c:	e0 2d       	mov	r30, r0
 16e:	09 94       	ijmp

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
