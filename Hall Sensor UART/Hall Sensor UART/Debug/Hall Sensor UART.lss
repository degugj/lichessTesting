
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d22  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b2  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	a8 00       	.word	0x00a8	; ????
  6a:	90 00       	.word	0x0090	; ????
  6c:	9e 00       	.word	0x009e	; ????
  6e:	9a 00       	.word	0x009a	; ????
  70:	95 00       	.word	0x0095	; ????
  72:	a3 00       	.word	0x00a3	; ????
  74:	8b 00       	.word	0x008b	; ????
  76:	ad 00       	.word	0x00ad	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a0 31       	cpi	r26, 0x10	; 16
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  98:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <USART_Transmit>:
	USART_Transmit(Byte1);
	USART_Transmit(Byte2);
}

void LEDon(void) {
	PORTB |= (1<<2);
  a0:	ef e9       	ldi	r30, 0x9F	; 159
  a2:	ff e0       	ldi	r31, 0x0F	; 15
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <USART_Transmit+0x4>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <USART_Transmit+0xa>
  aa:	00 00       	nop
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <USART_Transmit+0x10>
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ba:	08 95       	ret

000000bc <USART_Receive>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <USART_Receive+0x4>
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <USART_init>:
  ce:	e4 e6       	ldi	r30, 0x64	; 100
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 83       	st	Z, r24
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ea:	08 95       	ret

000000ec <MuxInit>:
  ec:	52 9a       	sbi	0x0a, 2	; 10
  ee:	53 9a       	sbi	0x0a, 3	; 10
  f0:	54 9a       	sbi	0x0a, 4	; 10
  f2:	56 98       	cbi	0x0a, 6	; 10
  f4:	57 98       	cbi	0x0a, 7	; 10
  f6:	20 98       	cbi	0x04, 0	; 4
  f8:	21 98       	cbi	0x04, 1	; 4
  fa:	38 98       	cbi	0x07, 0	; 7
  fc:	39 98       	cbi	0x07, 1	; 7
  fe:	3a 98       	cbi	0x07, 2	; 7
 100:	3b 98       	cbi	0x07, 3	; 7
 102:	08 95       	ret

00000104 <SetABC>:
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	91 05       	cpc	r25, r1
 10a:	50 f5       	brcc	.+84     	; 0x160 <SetABC+0x5c>
 10c:	fc 01       	movw	r30, r24
 10e:	ec 5c       	subi	r30, 0xCC	; 204
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	0c 94 be 01 	jmp	0x37c	; 0x37c <__tablejump2__>
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	5a 98       	cbi	0x0b, 2	; 11
 11e:	20 c0       	rjmp	.+64     	; 0x160 <SetABC+0x5c>
 120:	5b 9a       	sbi	0x0b, 3	; 11
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	8b 7e       	andi	r24, 0xEB	; 235
 126:	8b b9       	out	0x0b, r24	; 11
 128:	1b c0       	rjmp	.+54     	; 0x160 <SetABC+0x5c>
 12a:	5c 9a       	sbi	0x0b, 4	; 11
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	83 7f       	andi	r24, 0xF3	; 243
 130:	8b b9       	out	0x0b, r24	; 11
 132:	16 c0       	rjmp	.+44     	; 0x160 <SetABC+0x5c>
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	83 7e       	andi	r24, 0xE3	; 227
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	12 c0       	rjmp	.+36     	; 0x160 <SetABC+0x5c>
 13c:	5a 9a       	sbi	0x0b, 2	; 11
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	87 7e       	andi	r24, 0xE7	; 231
 142:	8b b9       	out	0x0b, r24	; 11
 144:	0d c0       	rjmp	.+26     	; 0x160 <SetABC+0x5c>
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	84 61       	ori	r24, 0x14	; 20
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	5b 98       	cbi	0x0b, 3	; 11
 14e:	08 c0       	rjmp	.+16     	; 0x160 <SetABC+0x5c>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8c 60       	ori	r24, 0x0C	; 12
 154:	8b b9       	out	0x0b, r24	; 11
 156:	5c 98       	cbi	0x0b, 4	; 11
 158:	03 c0       	rjmp	.+6      	; 0x160 <SetABC+0x5c>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8c 61       	ori	r24, 0x1C	; 28
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9c e9       	ldi	r25, 0x9C	; 156
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <SetABC+0x60>
 168:	00 c0       	rjmp	.+0      	; 0x16a <SetABC+0x66>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <GatherMuxDataB>:
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	09 f4       	brne	.+2      	; 0x184 <GatherMuxDataB+0x16>
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 e0       	ldi	r16, 0x01	; 1
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <GatherMuxDataB+0x20>
 18a:	00 0f       	add	r16, r16
 18c:	11 1f       	adc	r17, r17
 18e:	9a 95       	dec	r25
 190:	e2 f7       	brpl	.-8      	; 0x18a <GatherMuxDataB+0x1c>
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	d1 2c       	mov	r13, r1
 198:	ee 24       	eor	r14, r14
 19a:	e3 94       	inc	r14
 19c:	f1 2c       	mov	r15, r1
 19e:	8c 2f       	mov	r24, r28
 1a0:	0e 94 82 00 	call	0x104	; 0x104 <SetABC>
 1a4:	1e 9a       	sbi	0x03, 6	; 3
 1a6:	83 b1       	in	r24, 0x03	; 3
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	80 23       	and	r24, r16
 1ac:	91 23       	and	r25, r17
 1ae:	89 2b       	or	r24, r25
 1b0:	b9 f4       	brne	.+46     	; 0x1e0 <GatherMuxDataB+0x72>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	9c e0       	ldi	r25, 0x0C	; 12
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <GatherMuxDataB+0x4a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <GatherMuxDataB+0x54>
 1c2:	00 00       	nop
 1c4:	83 b1       	in	r24, 0x03	; 3
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	80 23       	and	r24, r16
 1ca:	91 23       	and	r25, r17
 1cc:	89 2b       	or	r24, r25
 1ce:	41 f4       	brne	.+16     	; 0x1e0 <GatherMuxDataB+0x72>
 1d0:	c7 01       	movw	r24, r14
 1d2:	0c 2e       	mov	r0, r28
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GatherMuxDataB+0x6c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GatherMuxDataB+0x68>
 1de:	d8 2a       	or	r13, r24
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	c8 30       	cpi	r28, 0x08	; 8
 1e4:	d1 05       	cpc	r29, r1
 1e6:	d9 f6       	brne	.-74     	; 0x19e <GatherMuxDataB+0x30>
 1e8:	8d 2d       	mov	r24, r13
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	08 95       	ret

000001fa <SendData>:
 1fa:	cf 93       	push	r28
 1fc:	c6 2f       	mov	r28, r22
 1fe:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LEDoff>:
}

void LEDoff(void) {
	PORTB &= ~(1<<2);
 20c:	2a 98       	cbi	0x05, 2	; 5
 20e:	08 95       	ret

00000210 <DumpAllData>:
}

void DumpAllData(void) {
	//MD0 = GatherMuxDataD(0);
	MD0 = 0x00;
 210:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <MD0>
	MD1 = 0b01000000;
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <MD1>
	//MD1 &= ~(1<<3);
	MD2 = GatherMuxDataB(2);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 b7 00 	call	0x16e	; 0x16e <GatherMuxDataB>
 220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <MD2>
	//MD3 = GatherMuxDataB(3);
	MD3 = 0x00;
 224:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <MD3>
	//MD4 = GatherMuxDataC(4);
	MD4 = 0x00;
 228:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <MD4>
	//MD5 = GatherMuxDataC(5);
	MD5 = 0x00;
 22c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	MD6 = 0x00;
 230:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <MD6>
	//MD7 = GatherMuxDataC(7);
	MD7 = 0x00;
 234:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <MD7>
	
	SendData(0x00,MD0);
 238:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <MD0>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x01,MD1);
 242:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <MD1>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x02,MD2);
 24c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MD2>
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x03,MD3);
 256:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MD3>
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x04,MD4);
 260:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MD4>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x05,MD5);
 26a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x06,MD6);
 274:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MD6>
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
	SendData(0x07,MD7);
 27e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MD7>
 282:	87 e0       	ldi	r24, 0x07	; 7
 284:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
 288:	08 95       	ret

0000028a <FastScan>:
}

void FastScan(void) {
	LD0 = MD0;
 28a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MD0>
 28e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LD0>
	LD1 = MD1;
 292:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <MD1>
 296:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <LD1>
	LD2 = MD2;
 29a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <MD2>
 29e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <LD2>
	LD3 = MD3;
 2a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <MD3>
 2a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LD3>
	LD4 = MD4;
 2aa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <MD4>
 2ae:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <LD4>
	LD5 = MD5;
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LD5>
	LD6 = MD6;
 2ba:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <MD6>
 2be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LD6>
	LD7 = MD7;
 2c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <MD7>
 2c6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LD7>
	
	MD0 = 0x00;
 2ca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <MD0>
	MD1 = 0b01000000;
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <MD1>
	//MD1 &= ~(1<<3);
	MD2 = GatherMuxDataB(2);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 b7 00 	call	0x16e	; 0x16e <GatherMuxDataB>
 2da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <MD2>
	//MD3 = GatherMuxDataB(3);
	MD3 = 0x00;
 2de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <MD3>
	//MD4 = GatherMuxDataC(4);
	MD4 = 0x00;
 2e2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <MD4>
	//MD5 = GatherMuxDataC(5);
	MD5 = 0x00;
 2e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	MD6 = 0x00;
 2ea:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <MD6>
	//MD7 = GatherMuxDataC(7);
	MD7 = 0x00;
 2ee:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <MD7>
	
	if (MD2 != LD2) {
 2f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <LD2>
 2f6:	89 17       	cp	r24, r25
 2f8:	61 f1       	breq	.+88     	; 0x352 <FastScan+0xc8>
		SendData(0x00,MD0);
 2fa:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <MD0>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x01,MD1);
 304:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <MD1>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x02,MD2);
 30e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MD2>
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x03,MD3);
 318:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MD3>
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x04,MD4);
 322:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MD4>
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x05,MD5);
 32c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x06,MD6);
 336:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MD6>
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		SendData(0x07,MD7);
 340:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MD7>
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SendData>
		
		//LD0 = MD0;
		//LD1 = MD1;
		LD2 = MD2;
 34a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <MD2>
 34e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <LD2>
 352:	08 95       	ret

00000354 <main>:
}

int main(void)
{
	
	MuxInit();
 354:	0e 94 76 00 	call	0xec	; 0xec <MuxInit>
	
	DDRB |= (1<<2); //SetLED as output
 358:	22 9a       	sbi	0x04, 2	; 4
	
	LEDoff();
 35a:	0e 94 06 01 	call	0x20c	; 0x20c <LEDoff>
	
	uint8_t UART_lastRecievedByte;
	USART_init();
 35e:	0e 94 67 00 	call	0xce	; 0xce <USART_init>
	
	
	
while(1){	
	UART_lastRecievedByte = USART_Receive();
 362:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Receive>
	
	
	if (UART_lastRecievedByte == 0b00101000) {
 366:	88 32       	cpi	r24, 0x28	; 40
 368:	11 f4       	brne	.+4      	; 0x36e <main+0x1a>
		DumpAllData();
 36a:	0e 94 08 01 	call	0x210	; 0x210 <DumpAllData>
	}
	
	UART_lastRecievedByte = USART_Receive();
 36e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Receive>
	//
	if (UART_lastRecievedByte == 0b00110000) {
 372:	80 33       	cpi	r24, 0x30	; 48
 374:	b1 f7       	brne	.-20     	; 0x362 <main+0xe>
		while (1) {
			FastScan();
 376:	0e 94 45 01 	call	0x28a	; 0x28a <FastScan>
 37a:	fd cf       	rjmp	.-6      	; 0x376 <main+0x22>

0000037c <__tablejump2__>:
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	05 90       	lpm	r0, Z+
 382:	f4 91       	lpm	r31, Z
 384:	e0 2d       	mov	r30, r0
 386:	09 94       	ijmp

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
