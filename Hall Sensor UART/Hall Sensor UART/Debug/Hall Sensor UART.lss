
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087a  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000217  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	7a 00       	.word	0x007a	; ????
  6a:	62 00       	.word	0x0062	; ????
  6c:	70 00       	.word	0x0070	; ????
  6e:	6c 00       	.word	0x006c	; ????
  70:	67 00       	.word	0x0067	; ????
  72:	75 00       	.word	0x0075	; ????
  74:	5d 00       	.word	0x005d	; ????
  76:	7f 00       	.word	0x007f	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <MuxInit>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
	USART_Transmit(Byte1);
	USART_Transmit(Byte2);
}
  90:	52 9a       	sbi	0x0a, 2	; 10
  92:	53 9a       	sbi	0x0a, 3	; 10
  94:	54 9a       	sbi	0x0a, 4	; 10
  96:	3e 98       	cbi	0x07, 6	; 7
  98:	3f 98       	cbi	0x07, 7	; 7
  9a:	20 98       	cbi	0x04, 0	; 4
  9c:	21 98       	cbi	0x04, 1	; 4
  9e:	38 98       	cbi	0x07, 0	; 7
  a0:	39 98       	cbi	0x07, 1	; 7
  a2:	3a 98       	cbi	0x07, 2	; 7
  a4:	3b 98       	cbi	0x07, 3	; 7
  a6:	08 95       	ret

000000a8 <SetABC>:
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	91 05       	cpc	r25, r1
  ae:	50 f5       	brcc	.+84     	; 0x104 <SetABC+0x5c>
  b0:	fc 01       	movw	r30, r24
  b2:	ec 5c       	subi	r30, 0xCC	; 204
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__tablejump2__>
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	88 61       	ori	r24, 0x18	; 24
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	5a 98       	cbi	0x0b, 2	; 11
  c2:	08 95       	ret
  c4:	5b 9a       	sbi	0x0b, 3	; 11
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8b 7e       	andi	r24, 0xEB	; 235
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret
  ce:	5c 9a       	sbi	0x0b, 4	; 11
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	83 7f       	andi	r24, 0xF3	; 243
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	08 95       	ret
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	83 7e       	andi	r24, 0xE3	; 227
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	08 95       	ret
  e0:	5a 9a       	sbi	0x0b, 2	; 11
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	87 7e       	andi	r24, 0xE7	; 231
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	84 61       	ori	r24, 0x14	; 20
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	5b 98       	cbi	0x0b, 3	; 11
  f2:	08 95       	ret
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8c 60       	ori	r24, 0x0C	; 12
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	5c 98       	cbi	0x0b, 4	; 11
  fc:	08 95       	ret
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	8c 61       	ori	r24, 0x1C	; 28
 102:	8b b9       	out	0x0b, r24	; 11
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
	
	MuxInit();
 106:	0e 94 48 00 	call	0x90	; 0x90 <MuxInit>
// 			SendData(0x05,0x00);
// 			SendData(0x06,0x00);
// 			SendData(0x07,0x00);
// 		}
		
		PIND |= (1<<Mux0);
 10a:	4e 9a       	sbi	0x09, 6	; 9
		
		//uint8_t MD0 = 0x00; //GatherMuxData(0);
		
		SetABC(6);
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 54 00 	call	0xa8	; 0xa8 <SetABC>
				
		if(bit_is_clear(PIND,Mux0)) {
 112:	4e 99       	sbic	0x09, 6	; 9
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x14>
		//if ((PIND & (1<<Mux0))) {.
			PORTB |= (1<<2);
 116:	2a 9a       	sbi	0x05, 2	; 5
 118:	f8 cf       	rjmp	.-16     	; 0x10a <main+0x4>
			//MD0 = 0xFF;
		} else {
			PORTB &= ~(1<<2);
 11a:	2a 98       	cbi	0x05, 2	; 5
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <main+0x4>

0000011e <__tablejump2__>:
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	05 90       	lpm	r0, Z+
 124:	f4 91       	lpm	r31, Z
 126:	e0 2d       	mov	r30, r0
 128:	09 94       	ijmp

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
