
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da9  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ab  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000669  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000797  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	a0 00       	.word	0x00a0	; ????
  6a:	88 00       	.word	0x0088	; ????
  6c:	96 00       	.word	0x0096	; ????
  6e:	92 00       	.word	0x0092	; ????
  70:	8d 00       	.word	0x008d	; ????
  72:	9b 00       	.word	0x009b	; ????
  74:	83 00       	.word	0x0083	; ????
  76:	a5 00       	.word	0x00a5	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 92 01 	call	0x324	; 0x324 <main>
  88:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	ef e9       	ldi	r30, 0x9F	; 159
  92:	ff e0       	ldi	r31, 0x0F	; 15
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <USART_Transmit+0x4>
  98:	00 c0       	rjmp	.+0      	; 0x9a <USART_Transmit+0xa>
  9a:	00 00       	nop
void USART_Transmit(uint8_t data)
{

	_delay_ms(1);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	95 ff       	sbrs	r25, 5
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <USART_Transmit+0x10>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	08 95       	ret

000000ac <USART_Receive>:
 * Description: Returns the received parameters from UART
 * Input Parameters : NONE
 * Return value: 8-bit data received from UART
 */
int USART_Receive(void){
	while ( !(UCSR0A & (1<<RXC0)) ){}
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	ec f7       	brge	.-6      	; 0xb0 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
  b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <USART_init>:

void USART_init(void){
	
	//DISABLE POWER REDUCTION FOR USART
	PRR &= ~( 1 << PRUSART0);
  be:	e4 e6       	ldi	r30, 0x64	; 100
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	80 83       	st	Z, r24
	/*Set baud rate */
	//9600 for 16MHz clock
	UBRR0L = 0b01100111;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*Enable receiver and transmitter //and Receive INterrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE0);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* 8-bit data */
	UCSR0C = (3<<UCSZ00);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  da:	08 95       	ret

000000dc <MuxInit>:
}

void MuxInit(void) 
{
	DDRD |= (1<<A);
  dc:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= (1<<B);
  de:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1<<C);
  e0:	54 9a       	sbi	0x0a, 4	; 10
	
	DDRD &= ~(1<<Mux0);
  e2:	56 98       	cbi	0x0a, 6	; 10
	DDRD &= ~(1<<Mux1);
  e4:	57 98       	cbi	0x0a, 7	; 10
	DDRB &= ~(1<<Mux2);
  e6:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~(1<<Mux3);
  e8:	21 98       	cbi	0x04, 1	; 4
	DDRC &= ~(1<<Mux4);
  ea:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<Mux5);
  ec:	39 98       	cbi	0x07, 1	; 7
	DDRC &= ~(1<<Mux6);
  ee:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1<<Mux7);
  f0:	3b 98       	cbi	0x07, 3	; 7
  f2:	08 95       	ret

000000f4 <SetABC>:
}

void SetABC(uint8_t row)
{
 	switch (row)
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	91 05       	cpc	r25, r1
  fa:	50 f5       	brcc	.+84     	; 0x150 <SetABC+0x5c>
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5c       	subi	r30, 0xCC	; 204
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__tablejump2__>
 	{
 		case 6 :
 		PORTD |= (1<<C)|(1<<B);
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<A);
 10c:	5a 98       	cbi	0x0b, 2	; 11
 		break;
 10e:	08 95       	ret
 		case 1 :
 		PORTD |= (1<<B);
 110:	5b 9a       	sbi	0x0b, 3	; 11
 		PORTD &= ~(1<<A) &~(1<<C);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8b 7e       	andi	r24, 0xEB	; 235
 116:	8b b9       	out	0x0b, r24	; 11
 		break;
 118:	08 95       	ret
 		case 4 :
 		PORTD |= (1<<C);
 11a:	5c 9a       	sbi	0x0b, 4	; 11
 		PORTD &= ~(1<<A)&~(1<<B);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	83 7f       	andi	r24, 0xF3	; 243
 120:	8b b9       	out	0x0b, r24	; 11
 		break;
 122:	08 95       	ret
		case 3 :
		PORTD &= ~(1<<A)&~(1<<B)&~(1<<C);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	83 7e       	andi	r24, 0xE3	; 227
 128:	8b b9       	out	0x0b, r24	; 11
 		break;
 12a:	08 95       	ret
 		case 2 :
 		PORTD |= (1<<A);
 12c:	5a 9a       	sbi	0x0b, 2	; 11
 		PORTD &= ~(1<<B)&~(1<<C);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	87 7e       	andi	r24, 0xE7	; 231
 132:	8b b9       	out	0x0b, r24	; 11
 		break;
 134:	08 95       	ret
 		case 5 :
 		PORTD |= (1<<C)|(1<<A);
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	84 61       	ori	r24, 0x14	; 20
 13a:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<B);
 13c:	5b 98       	cbi	0x0b, 3	; 11
		break;
 13e:	08 95       	ret
		case 0:
 		PORTD |= (1<<A)|(1<<B);
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8c 60       	ori	r24, 0x0C	; 12
 144:	8b b9       	out	0x0b, r24	; 11
 		PORTD &= ~(1<<C);
 146:	5c 98       	cbi	0x0b, 4	; 11
		break;
 148:	08 95       	ret
		case 7 :
		PORTD |= (1<<A)|(1<<B)|(1<<C);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8c 61       	ori	r24, 0x1C	; 28
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

00000152 <GatherMuxDataB>:
	}

}

uint8_t GatherMuxDataB(uint8_t Mux)
{
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	09 f4       	brne	.+2      	; 0x168 <GatherMuxDataB+0x16>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 e0       	ldi	r16, 0x01	; 1
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <GatherMuxDataB+0x20>
 16e:	00 0f       	add	r16, r16
 170:	11 1f       	adc	r17, r17
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <GatherMuxDataB+0x1c>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PINB |= (1<<6);
		if(bit_is_clear(PINB,Mux)) {
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux2;
	} else {
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
 17a:	d1 2c       	mov	r13, r1
		SetABC(i);
		PINB |= (1<<6);
		if(bit_is_clear(PINB,Mux)) {
			_delay_ms(500);
			if(bit_is_clear(PINB,Mux)) {
				MuxData |= (1<<i);
 17c:	ee 24       	eor	r14, r14
 17e:	e3 94       	inc	r14
 180:	f1 2c       	mov	r15, r1
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PINB |= (1<<6);
 188:	1e 9a       	sbi	0x03, 6	; 3
		if(bit_is_clear(PINB,Mux)) {
 18a:	83 b1       	in	r24, 0x03	; 3
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	80 23       	and	r24, r16
 190:	91 23       	and	r25, r17
 192:	89 2b       	or	r24, r25
 194:	b9 f4       	brne	.+46     	; 0x1c4 <GatherMuxDataB+0x72>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	89 e6       	ldi	r24, 0x69	; 105
 19a:	98 e1       	ldi	r25, 0x18	; 24
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <GatherMuxDataB+0x4a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <GatherMuxDataB+0x54>
 1a6:	00 00       	nop
			_delay_ms(500);
			if(bit_is_clear(PINB,Mux)) {
 1a8:	83 b1       	in	r24, 0x03	; 3
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 23       	and	r24, r16
 1ae:	91 23       	and	r25, r17
 1b0:	89 2b       	or	r24, r25
 1b2:	41 f4       	brne	.+16     	; 0x1c4 <GatherMuxDataB+0x72>
				MuxData |= (1<<i);
 1b4:	c7 01       	movw	r24, r14
 1b6:	0c 2e       	mov	r0, r28
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <GatherMuxDataB+0x6c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <GatherMuxDataB+0x68>
 1c2:	d8 2a       	or	r13, r24
 1c4:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux3;
	} 
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 1c6:	c8 30       	cpi	r28, 0x08	; 8
 1c8:	d1 05       	cpc	r29, r1
 1ca:	d9 f6       	brne	.-74     	; 0x182 <GatherMuxDataB+0x30>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 1cc:	8d 2d       	mov	r24, r13
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	08 95       	ret

000001de <GatherMuxDataC>:

uint8_t GatherMuxDataC(uint8_t Mux)
{
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
	if(Mux == 4) {
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	31 f0       	breq	.+12     	; 0x1fc <GatherMuxDataC+0x1e>
		Mux = Mux4;
	} else if (Mux == 5) {
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	31 f0       	breq	.+12     	; 0x200 <GatherMuxDataC+0x22>
		Mux = Mux5;
	} else if (Mux == 6) {
 1f4:	86 30       	cpi	r24, 0x06	; 6
 1f6:	31 f0       	breq	.+12     	; 0x204 <GatherMuxDataC+0x26>
		Mux = Mux6 ;
	} else {
		Mux = Mux7;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <GatherMuxDataC+0x28>
}

uint8_t GatherMuxDataC(uint8_t Mux)
{
	if(Mux == 4) {
		Mux = Mux4;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <GatherMuxDataC+0x28>
	} else if (Mux == 5) {
		Mux = Mux5;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <GatherMuxDataC+0x28>
	} else if (Mux == 6) {
		Mux = Mux6 ;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	01 e0       	ldi	r16, 0x01	; 1
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <GatherMuxDataC+0x32>
 20c:	00 0f       	add	r16, r16
 20e:	11 1f       	adc	r17, r17
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <GatherMuxDataC+0x2e>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PINC |= (1<<6);
		if(bit_is_clear(PINC,Mux)) {
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux6 ;
	} else {
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
 218:	d1 2c       	mov	r13, r1
		SetABC(i);
		PINC |= (1<<6);
		if(bit_is_clear(PINC,Mux)) {
			_delay_ms(500);
			if(bit_is_clear(PINC,Mux)) {
				MuxData |= (1<<i);
 21a:	ee 24       	eor	r14, r14
 21c:	e3 94       	inc	r14
 21e:	f1 2c       	mov	r15, r1
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PINC |= (1<<6);
 226:	36 9a       	sbi	0x06, 6	; 6
		if(bit_is_clear(PINC,Mux)) {
 228:	86 b1       	in	r24, 0x06	; 6
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	80 23       	and	r24, r16
 22e:	91 23       	and	r25, r17
 230:	89 2b       	or	r24, r25
 232:	b9 f4       	brne	.+46     	; 0x262 <GatherMuxDataC+0x84>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	89 e6       	ldi	r24, 0x69	; 105
 238:	98 e1       	ldi	r25, 0x18	; 24
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <GatherMuxDataC+0x5c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <GatherMuxDataC+0x66>
 244:	00 00       	nop
			_delay_ms(500);
			if(bit_is_clear(PINC,Mux)) {
 246:	86 b1       	in	r24, 0x06	; 6
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	80 23       	and	r24, r16
 24c:	91 23       	and	r25, r17
 24e:	89 2b       	or	r24, r25
 250:	41 f4       	brne	.+16     	; 0x262 <GatherMuxDataC+0x84>
				MuxData |= (1<<i);
 252:	c7 01       	movw	r24, r14
 254:	0c 2e       	mov	r0, r28
 256:	02 c0       	rjmp	.+4      	; 0x25c <GatherMuxDataC+0x7e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <GatherMuxDataC+0x7a>
 260:	d8 2a       	or	r13, r24
 262:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux7;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 264:	c8 30       	cpi	r28, 0x08	; 8
 266:	d1 05       	cpc	r29, r1
 268:	d9 f6       	brne	.-74     	; 0x220 <GatherMuxDataC+0x42>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 26a:	8d 2d       	mov	r24, r13
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	08 95       	ret

0000027c <GatherMuxDataD>:

uint8_t GatherMuxDataD(uint8_t Mux)
{
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	if(Mux == 0) {
 28a:	88 23       	and	r24, r24
 28c:	11 f0       	breq	.+4      	; 0x292 <GatherMuxDataD+0x16>
		Mux = Mux0;
	} else {
		Mux = Mux1;
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	01 c0       	rjmp	.+2      	; 0x294 <GatherMuxDataD+0x18>
}

uint8_t GatherMuxDataD(uint8_t Mux)
{
	if(Mux == 0) {
		Mux = Mux0;
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	01 e0       	ldi	r16, 0x01	; 1
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <GatherMuxDataD+0x22>
 29a:	00 0f       	add	r16, r16
 29c:	11 1f       	adc	r17, r17
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <GatherMuxDataD+0x1e>
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
		PIND |= (1<<6);
		if(bit_is_clear(PIND,Mux)) {
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
		Mux = Mux0;
	} else {
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
 2a6:	d1 2c       	mov	r13, r1
		SetABC(i);
		PIND |= (1<<6);
		if(bit_is_clear(PIND,Mux)) {
			_delay_ms(500);
			if(bit_is_clear(PIND,Mux)) {
				MuxData |= (1<<i);
 2a8:	ee 24       	eor	r14, r14
 2aa:	e3 94       	inc	r14
 2ac:	f1 2c       	mov	r15, r1
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
		SetABC(i);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetABC>
		PIND |= (1<<6);
 2b4:	4e 9a       	sbi	0x09, 6	; 9
		if(bit_is_clear(PIND,Mux)) {
 2b6:	89 b1       	in	r24, 0x09	; 9
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	80 23       	and	r24, r16
 2bc:	91 23       	and	r25, r17
 2be:	89 2b       	or	r24, r25
 2c0:	b9 f4       	brne	.+46     	; 0x2f0 <GatherMuxDataD+0x74>
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	89 e6       	ldi	r24, 0x69	; 105
 2c6:	98 e1       	ldi	r25, 0x18	; 24
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <GatherMuxDataD+0x4c>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <GatherMuxDataD+0x56>
 2d2:	00 00       	nop
			_delay_ms(500);
			if(bit_is_clear(PIND,Mux)) {
 2d4:	89 b1       	in	r24, 0x09	; 9
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	80 23       	and	r24, r16
 2da:	91 23       	and	r25, r17
 2dc:	89 2b       	or	r24, r25
 2de:	41 f4       	brne	.+16     	; 0x2f0 <GatherMuxDataD+0x74>
				MuxData |= (1<<i);
 2e0:	c7 01       	movw	r24, r14
 2e2:	0c 2e       	mov	r0, r28
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GatherMuxDataD+0x6e>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GatherMuxDataD+0x6a>
 2ee:	d8 2a       	or	r13, r24
 2f0:	21 96       	adiw	r28, 0x01	; 1
	} else {
		Mux = Mux1;
	}
	
	uint8_t MuxData = 0x00;
	for (uint8_t i = 0; i < 8; i++) {
 2f2:	c8 30       	cpi	r28, 0x08	; 8
 2f4:	d1 05       	cpc	r29, r1
 2f6:	d9 f6       	brne	.-74     	; 0x2ae <GatherMuxDataD+0x32>
			}
			//USART_Transmit(0xFF);
		}
	}
	return MuxData;
}
 2f8:	8d 2d       	mov	r24, r13
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	08 95       	ret

0000030a <SendData>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
 30a:	cf 93       	push	r28
 30c:	c6 2f       	mov	r28, r22
	USART_Transmit(Byte1);
 30e:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
	USART_Transmit(Byte2);
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <LEDon>:

void LEDon(void) {
	PORTB |= (1<<2);
 31c:	2a 9a       	sbi	0x05, 2	; 5
 31e:	08 95       	ret

00000320 <LEDoff>:
}

void LEDoff(void) {
	PORTB &= ~(1<<2);
 320:	2a 98       	cbi	0x05, 2	; 5
 322:	08 95       	ret

00000324 <main>:
}

int main(void)
{
	
	MuxInit();
 324:	0e 94 6e 00 	call	0xdc	; 0xdc <MuxInit>
	
	DDRB |= (1<<2); //SetLED as output
 328:	22 9a       	sbi	0x04, 2	; 4
	
	LEDoff();
 32a:	0e 94 90 01 	call	0x320	; 0x320 <LEDoff>
	
	uint8_t UART_lastRecievedByte;
	USART_init();
 32e:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_init>
	uint8_t LD4;
	uint8_t LD5;
	uint8_t LD6;
	uint8_t LD7;
	
	UART_lastRecievedByte = USART_Receive();
 332:	0e 94 56 00 	call	0xac	; 0xac <USART_Receive>
 336:	d8 2e       	mov	r13, r24
	
	// get initial data
	MD0 = GatherMuxDataD(0);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 3e 01 	call	0x27c	; 0x27c <GatherMuxDataD>
 33e:	c8 2f       	mov	r28, r24
	MD1 = 0b01000000;
	//MD1 &= ~(1<<3);
	MD2 = GatherMuxDataB(2);
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 346:	18 2f       	mov	r17, r24
	MD3 = GatherMuxDataB(3);
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 34e:	08 2f       	mov	r16, r24
	MD4 = GatherMuxDataC(4);
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 356:	e8 2e       	mov	r14, r24
	MD5 = GatherMuxDataC(5);
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 35e:	f8 2e       	mov	r15, r24
	MD6 = 0x00;
	MD7 = GatherMuxDataC(7);
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 366:	d8 2f       	mov	r29, r24
	LD6 = MD6;
	LD7 = MD7;
	
	
			
	if (UART_lastRecievedByte == 0b00101000) {
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	d8 12       	cpse	r13, r24
 36c:	20 c0       	rjmp	.+64     	; 0x3ae <main+0x8a>
		SendData(0x00,MD0);
 36e:	6c 2f       	mov	r22, r28
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x01,MD1);
 376:	60 e4       	ldi	r22, 0x40	; 64
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x02,MD2);
 37e:	61 2f       	mov	r22, r17
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x03,MD3);
 386:	60 2f       	mov	r22, r16
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x04,MD4);
 38e:	6e 2d       	mov	r22, r14
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x05,MD5);
 396:	6f 2d       	mov	r22, r15
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x06,MD6);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
		SendData(0x07,MD7);
 3a6:	6d 2f       	mov	r22, r29
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
	uint8_t running;
	running = 0;
	
while(1){	
	
	UART_lastRecievedByte = USART_Receive();
 3ae:	0e 94 56 00 	call	0xac	; 0xac <USART_Receive>
	//
	if (UART_lastRecievedByte == 0b00110000) {
 3b2:	80 33       	cpi	r24, 0x30	; 48
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x8a>
		running = 1;
		LEDon();
 3b6:	0e 94 8e 01 	call	0x31c	; 0x31c <LEDon>
 3ba:	a0 2e       	mov	r10, r16
 3bc:	b1 2e       	mov	r11, r17
 3be:	fc 2e       	mov	r15, r28
while(1){	
	
	UART_lastRecievedByte = USART_Receive();
	//
	if (UART_lastRecievedByte == 0b00110000) {
		running = 1;
 3c0:	d1 e0       	ldi	r29, 0x01	; 1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <main+0xa6>
			LD5 = MD5;
			LD6 = MD6;
			LD7 = MD7;
			running ++;
			if(running == 2) {
				running = 0;
 3c4:	a0 2e       	mov	r10, r16
 3c6:	b1 2e       	mov	r11, r17
 3c8:	fc 2e       	mov	r15, r28
		LEDon();
    while (running < 2) 
    {
		//_delay_ms(100);
		
		MD0 = GatherMuxDataD(0);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 3e 01 	call	0x27c	; 0x27c <GatherMuxDataD>
 3d0:	c8 2f       	mov	r28, r24
		//MD1 = GatherMuxDataD(1);
		//MD1 &= ~(1<<3);
		MD2 = GatherMuxDataB(2);
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 3d8:	18 2f       	mov	r17, r24
		MD3 = GatherMuxDataB(3);
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 a9 00 	call	0x152	; 0x152 <GatherMuxDataB>
 3e0:	08 2f       	mov	r16, r24
		MD4 = GatherMuxDataC(4);
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 3e8:	c8 2e       	mov	r12, r24
		MD5 = GatherMuxDataC(5);
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 3f0:	d8 2e       	mov	r13, r24
		MD6 = 0x00;
		MD7 = GatherMuxDataC(7);
 3f2:	87 e0       	ldi	r24, 0x07	; 7
 3f4:	0e 94 ef 00 	call	0x1de	; 0x1de <GatherMuxDataC>
 3f8:	e8 2e       	mov	r14, r24
		
		//_delay_ms(100);
// 		
		if (MD0 != LD0 || MD1 != LD1 || MD2 != LD2 || MD3 != LD3) {
 3fa:	cf 11       	cpse	r28, r15
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	1b 11       	cpse	r17, r11
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	0a 15       	cp	r16, r10
 404:	39 f1       	breq	.+78     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			SendData(0x00,MD0);
 406:	6c 2f       	mov	r22, r28
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x01,MD1);
 40e:	60 e4       	ldi	r22, 0x40	; 64
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x02,MD2);
 416:	61 2f       	mov	r22, r17
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x03,MD3);
 41e:	60 2f       	mov	r22, r16
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x04,MD4);
 426:	6c 2d       	mov	r22, r12
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x05,MD5);
 42e:	6d 2d       	mov	r22, r13
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x06,MD6);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			SendData(0x07,MD7);
 43e:	6e 2d       	mov	r22, r14
 440:	87 e0       	ldi	r24, 0x07	; 7
 442:	0e 94 85 01 	call	0x30a	; 0x30a <SendData>
			LD3 = MD3;
			LD4 = MD4;
			LD5 = MD5;
			LD6 = MD6;
			LD7 = MD7;
			running ++;
 446:	df 5f       	subi	r29, 0xFF	; 255
			if(running == 2) {
 448:	d2 30       	cpi	r29, 0x02	; 2
 44a:	21 f4       	brne	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				running = 0;
				LEDoff();
 44c:	0e 94 90 01 	call	0x320	; 0x320 <LEDoff>
			LD5 = MD5;
			LD6 = MD6;
			LD7 = MD7;
			running ++;
			if(running == 2) {
				running = 0;
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	b8 cf       	rjmp	.-144    	; 0x3c4 <main+0xa0>
	UART_lastRecievedByte = USART_Receive();
	//
	if (UART_lastRecievedByte == 0b00110000) {
		running = 1;
		LEDon();
    while (running < 2) 
 454:	d2 30       	cpi	r29, 0x02	; 2
 456:	08 f4       	brcc	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	b5 cf       	rjmp	.-150    	; 0x3c4 <main+0xa0>
 45a:	a9 cf       	rjmp	.-174    	; 0x3ae <main+0x8a>

0000045c <__tablejump2__>:
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	05 90       	lpm	r0, Z+
 462:	f4 91       	lpm	r31, Z
 464:	e0 2d       	mov	r30, r0
 466:	09 94       	ijmp

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
