
Hall Sensor UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000883  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000445  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000217  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	6c 00       	.word	0x006c	; ????
  6a:	71 00       	.word	0x0071	; ????
  6c:	76 00       	.word	0x0076	; ????
  6e:	7b 00       	.word	0x007b	; ????
  70:	7f 00       	.word	0x007f	; ????
  72:	84 00       	.word	0x0084	; ????
  74:	89 00       	.word	0x0089	; ????
  76:	8e 00       	.word	0x008e	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_init>:

void SendData(uint8_t Byte1, uint8_t Byte2)
{
	USART_Transmit(Byte1);
	USART_Transmit(Byte2);
}
  90:	e4 e6       	ldi	r30, 0x64	; 100
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	80 83       	st	Z, r24
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <MuxInit>:
  ae:	52 9a       	sbi	0x0a, 2	; 10
  b0:	53 9a       	sbi	0x0a, 3	; 10
  b2:	54 9a       	sbi	0x0a, 4	; 10
  b4:	56 98       	cbi	0x0a, 6	; 10
  b6:	57 98       	cbi	0x0a, 7	; 10
  b8:	20 98       	cbi	0x04, 0	; 4
  ba:	21 98       	cbi	0x04, 1	; 4
  bc:	38 98       	cbi	0x07, 0	; 7
  be:	39 98       	cbi	0x07, 1	; 7
  c0:	3a 98       	cbi	0x07, 2	; 7
  c2:	3b 98       	cbi	0x07, 3	; 7
  c4:	08 95       	ret

000000c6 <SetABC>:
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	91 05       	cpc	r25, r1
  cc:	50 f5       	brcc	.+84     	; 0x122 <SetABC+0x5c>
  ce:	fc 01       	movw	r30, r24
  d0:	ec 5c       	subi	r30, 0xCC	; 204
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__tablejump2__>
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	5a 98       	cbi	0x0b, 2	; 11
  e0:	08 95       	ret
  e2:	5b 9a       	sbi	0x0b, 3	; 11
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8b 7e       	andi	r24, 0xEB	; 235
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret
  ec:	5c 9a       	sbi	0x0b, 4	; 11
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	83 7f       	andi	r24, 0xF3	; 243
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	08 95       	ret
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	83 7e       	andi	r24, 0xE3	; 227
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret
  fe:	5a 9a       	sbi	0x0b, 2	; 11
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	87 7e       	andi	r24, 0xE7	; 231
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	84 61       	ori	r24, 0x14	; 20
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	5b 98       	cbi	0x0b, 3	; 11
 110:	08 95       	ret
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	8b b9       	out	0x0b, r24	; 11
 118:	5c 98       	cbi	0x0b, 4	; 11
 11a:	08 95       	ret
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8c 61       	ori	r24, 0x1C	; 28
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <main>:

int main(void)
{
	
	MuxInit();
 124:	0e 94 57 00 	call	0xae	; 0xae <MuxInit>
	
	DDRB |= (1<<2); //SetLED as output
 128:	22 9a       	sbi	0x04, 2	; 4
		
	//uint8_t UART_lastRecievedByte;
	USART_init();
 12a:	0e 94 48 00 	call	0x90	; 0x90 <USART_init>
		
		//PIND |= (1<<Mux0);
		
		//uint8_t MD0 = 0x00; //GatherMuxData(0);
		
		PINB |= (1<<Mux3);
 12e:	19 9a       	sbi	0x03, 1	; 3
		
		SetABC(4);
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <SetABC>
		
		//PORTD &= ~(1<<C);
		//PORTD &= ~(1<<B);
		//PORTD &= ~(1<<A);
				
		if(bit_is_clear(PINB,Mux3)) {
 136:	19 99       	sbic	0x03, 1	; 3
 138:	02 c0       	rjmp	.+4      	; 0x13e <main+0x1a>
		//if ((PIND & (1<<Mux0))) {
			PORTB |= (1<<2);
 13a:	2a 9a       	sbi	0x05, 2	; 5
 13c:	f8 cf       	rjmp	.-16     	; 0x12e <main+0xa>
			//MD0 = 0xFF;
		} else {
			PORTB &= ~(1<<2);
 13e:	2a 98       	cbi	0x05, 2	; 5
 140:	f6 cf       	rjmp	.-20     	; 0x12e <main+0xa>

00000142 <__tablejump2__>:
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	05 90       	lpm	r0, Z+
 148:	f4 91       	lpm	r31, Z
 14a:	e0 2d       	mov	r30, r0
 14c:	09 94       	ijmp

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
