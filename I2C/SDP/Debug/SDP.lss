
SDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000715  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000104  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TWIInit>:
{
	uint8_t status;
	// mast status;
	status = TWSR;
	return status;
}
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  90:	08 95       	ret

00000092 <TWIStart>:
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  98:	ec eb       	ldi	r30, 0xBC	; 188
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	88 23       	and	r24, r24
  a0:	ec f7       	brge	.-6      	; 0x9c <TWIStart+0xa>
  a2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  a6:	28 7f       	andi	r18, 0xF8	; 248
  a8:	28 30       	cpi	r18, 0x08	; 8
  aa:	31 f0       	breq	.+12     	; 0xb8 <TWIStart+0x26>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	20 31       	cpi	r18, 0x10	; 16
  b2:	21 f4       	brne	.+8      	; 0xbc <TWIStart+0x2a>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <TWIStop>:
  be:	84 e9       	ldi	r24, 0x94	; 148
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	84 fd       	sbrc	r24, 4
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <TWIStop+0xa>
  ce:	08 95       	ret

000000d0 <TWIWriteAddress>:
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  da:	ec eb       	ldi	r30, 0xBC	; 188
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <TWIWriteAddress+0xe>
  e4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e8:	28 7f       	andi	r18, 0xF8	; 248
  ea:	28 31       	cpi	r18, 0x18	; 24
  ec:	31 f0       	breq	.+12     	; 0xfa <TWIWriteAddress+0x2a>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	20 34       	cpi	r18, 0x40	; 64
  f4:	21 f4       	brne	.+8      	; 0xfe <TWIWriteAddress+0x2e>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret

00000100 <TWIWrite>:
 100:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	ec f7       	brge	.-6      	; 0x10e <TWIWrite+0xe>
 114:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 118:	98 7f       	andi	r25, 0xF8	; 248
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	98 32       	cpi	r25, 0x28	; 40
 120:	11 f4       	brne	.+4      	; 0x126 <TWIWrite+0x26>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	c9 01       	movw	r24, r18
 128:	08 95       	ret

0000012a <EEWriteByte>:

uint8_t EEWriteByte(uint8_t u8addr, uint8_t u8data)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	c8 2f       	mov	r28, r24
 130:	d6 2f       	mov	r29, r22
	TWIStart();
 132:	0e 94 49 00 	call	0x92	; 0x92 <TWIStart>

uint8_t TWIGetStatus(void)
{
	uint8_t status;
	// mast status;
	status = TWSR;
 136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
}

uint8_t EEWriteByte(uint8_t u8addr, uint8_t u8data)
{
	TWIStart();
	if(TWIGetStatus() != 0x08)
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	91 f4       	brne	.+36     	; 0x162 <EEWriteByte+0x38>
	return 1;
	// Select device and send A4 A1 A0 address bits
	TWIWriteAddress(u8addr);
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <TWIWriteAddress>

uint8_t TWIGetStatus(void)
{
	uint8_t status;
	// mast status;
	status = TWSR;
 144:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWIStart();
	if(TWIGetStatus() != 0x08)
	return 1;
	// Select device and send A4 A1 A0 address bits
	TWIWriteAddress(u8addr);
	if(TWIGetStatus() != 0x18)
 148:	88 31       	cpi	r24, 0x18	; 24
 14a:	69 f4       	brne	.+26     	; 0x166 <EEWriteByte+0x3c>
	// Send the rest of address
	//TWIWrite((uint8_t)(u16addr));
	//if(TWIGetStatus() != 0x28)
	//return ERROR;
	//write byte to eeprom
	TWIWrite(u8data);
 14c:	8d 2f       	mov	r24, r29
 14e:	0e 94 80 00 	call	0x100	; 0x100 <TWIWrite>

uint8_t TWIGetStatus(void)
{
	uint8_t status;
	// mast status;
	status = TWSR;
 152:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//TWIWrite((uint8_t)(u16addr));
	//if(TWIGetStatus() != 0x28)
	//return ERROR;
	//write byte to eeprom
	TWIWrite(u8data);
 	if(TWIGetStatus() != 0x28)
 156:	88 32       	cpi	r24, 0x28	; 40
 158:	41 f4       	brne	.+16     	; 0x16a <EEWriteByte+0x40>
 	return 1;
	TWIStop();
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <TWIStop>
	return 0;
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	05 c0       	rjmp	.+10     	; 0x16c <EEWriteByte+0x42>

uint8_t EEWriteByte(uint8_t u8addr, uint8_t u8data)
{
	TWIStart();
	if(TWIGetStatus() != 0x08)
	return 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	03 c0       	rjmp	.+6      	; 0x16c <EEWriteByte+0x42>
	// Select device and send A4 A1 A0 address bits
	TWIWriteAddress(u8addr);
	if(TWIGetStatus() != 0x18)
	return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	01 c0       	rjmp	.+2      	; 0x16c <EEWriteByte+0x42>
	//if(TWIGetStatus() != 0x28)
	//return ERROR;
	//write byte to eeprom
	TWIWrite(u8data);
 	if(TWIGetStatus() != 0x28)
 	return 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
	TWIStop();
	return 0;
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:

int main(void)
{
	TWIInit();
 172:	0e 94 40 00 	call	0x80	; 0x80 <TWIInit>
	while(1)
	{
		EEWriteByte(0x0F,0x0F);
 176:	6f e0       	ldi	r22, 0x0F	; 15
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 95 00 	call	0x12a	; 0x12a <EEWriteByte>
 17e:	fb cf       	rjmp	.-10     	; 0x176 <main+0x4>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
